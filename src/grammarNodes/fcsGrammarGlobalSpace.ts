import { GrammarKind, GrammarType } from "./grammarType";


export const globalSpaceGrammarNodes = [

    new GrammarType({ dot: 0, key: "Abs", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Acos", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Acosh", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Asin", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Asinh", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Atan", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Atanh", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Atan2", kind: GrammarKind.Function }),
    // new GrammarType({ dot: 0, key: "BigMul", kind: GrammarKind.Function }),
    // new GrammarType({ dot: 0, key: "BitDecrement", kind: GrammarKind.Function }),
    // new GrammarType({ dot: 0, key: "BitIncrement", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "CopySign", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Clamp", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Cbrt", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Ceiling", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Cos", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Cosh", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "DivRem", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Exp", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "FusedMultiplyAdd", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "IEEERemainder", kind: GrammarKind.Function }),
    // new GrammarType({ dot: 0, key: "ILogB", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Log", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Log2", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Log10", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Pow", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Sin", kind: GrammarKind.Function }),
    // new GrammarType({ dot: 0, key: "SinCos", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Sinh", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Sqrt", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Tan", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Tanh", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Max", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Min", kind: GrammarKind.Function }),
    // new GrammarType({ dot: 0, key: "MaxMagnitude", kind: GrammarKind.Function }),
    // new GrammarType({ dot: 0, key: "MinMagnitude", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Round", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Sign", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Truncate", kind: GrammarKind.Function }),
    // new GrammarType({ dot: 0, key: "ScaleB", kind: GrammarKind.Function }),
    // new GrammarType({ dot: 0, key: "ReciprocalEstimate", kind: GrammarKind.Function }),
    // new GrammarType({ dot: 0, key: "ReciprocalSqrtEstimate", kind: GrammarKind.Function }),

    new GrammarType({ dot: 0, key: "Rgb", kind: GrammarKind.Function }),
    new GrammarType({ dot: 0, key: "Argb", kind: GrammarKind.Function }),

    new GrammarType({ dot: 0, key: "False", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 0, key: "True", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 0, key: "PI", kind: GrammarKind.Constant }),

    new GrammarType({ dot: 0, key: "import", kind: GrammarKind.Order }),
    new GrammarType({ dot: 0, key: "model_shell3d", kind: GrammarKind.OrderWithoutParameters }),
    new GrammarType({ dot: 0, key: "list_envelopes", kind: GrammarKind.OrderWithoutParameters }),
    new GrammarType({ dot: 0, key: "explode_envelopes", kind: GrammarKind.OrderWithoutParameters }),

    new GrammarType({ dot: 0, key: "print", kind: GrammarKind.Order }),
    new GrammarType({ dot: 0, key: "browse_report", kind: GrammarKind.Order }),
    new GrammarType({ dot: 0, key: "browse_image", kind: GrammarKind.Order }),
    new GrammarType({ dot: 0, key: "exportesaxml", kind: GrammarKind.Order }),

    new GrammarType({ dot: 0, key: "#fli_json", kind: GrammarKind.Order }),
    new GrammarType({ dot: 0, key: "#fli_html", kind: GrammarKind.Order }),
    new GrammarType({ dot: 0, key: "#fli_png", kind: GrammarKind.Order }),
    new GrammarType({ dot: 0, key: "#fli_3js", kind: GrammarKind.Order }),
    new GrammarType({ dot: 0, key: "#fli_jpg", kind: GrammarKind.Order }),
    new GrammarType({ dot: 0, key: "#fli_dxf", kind: GrammarKind.Order }),
    new GrammarType({ dot: 0, key: "#fli_rtf", kind: GrammarKind.Order }),
    new GrammarType({ dot: 0, key: "#fli_ifc", kind: GrammarKind.Order }),
    new GrammarType({ dot: 0, key: "#fli_docx", kind: GrammarKind.Order }),
    new GrammarType({ dot: 0, key: "#fli_xlsx", kind: GrammarKind.Order }),
    new GrammarType({ dot: 0, key: "#fli_pdf", kind: GrammarKind.Order }),
    new GrammarType({ dot: 0, key: "#fli_svg", kind: GrammarKind.Order }),
    new GrammarType({ dot: 0, key: "#fli_zip", kind: GrammarKind.Order }),
    new GrammarType({ dot: 0, key: "#fli_esazip", kind: GrammarKind.Order }),

    new GrammarType({ dot: 0, key: "Math", kind: GrammarKind.Module }),
    new GrammarType({ dot: 1, key: "Math.PI", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 1, key: "Math.E", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 1, key: "Math.ToInteger", kind: GrammarKind.Function }),
    new GrammarType({ dot: 1, key: "Math.CylinderFieldBiCubicResamplingAndInterpolation", kind: GrammarKind.Object }),
    new GrammarType({ dot: 1, key: "Math.CylinderFieldBiCubic", kind: GrammarKind.Object }),
    new GrammarType({ dot: 1, key: "Math.Interval", kind: GrammarKind.Function }),
    new GrammarType({ dot: 1, key: "Math.IntervalSet", kind: GrammarKind.Function }),
    new GrammarType({ dot: 1, key: "Math.Subtraction", kind: GrammarKind.Function }),
    new GrammarType({ dot: 1, key: "Math.Interval1D", kind: GrammarKind.Module }),
    new GrammarType({ dot: 2, key: "Math.Interval1D.Union", kind: GrammarKind.Function }),
    new GrammarType({ dot: 2, key: "Math.Interval1D.Intersection", kind: GrammarKind.Function }),
    new GrammarType({ dot: 2, key: "Math.Interval1D.IsEmptyInterval", kind: GrammarKind.Function }),
    new GrammarType({ dot: 2, key: "Math.Interval1D.Empty", kind: GrammarKind.Constant }),

    new GrammarType({ dot: 0, key: "CssAlignment", kind: GrammarKind.Module }),
    new GrammarType({ dot: 1, key: "CssAlignment.None", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 1, key: "CssAlignment.TopLeft", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 1, key: "CssAlignment.Top", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 1, key: "CssAlignment.TopRight", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 1, key: "CssAlignment.Left", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 1, key: "CssAlignment.Centre", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 1, key: "CssAlignment.Right", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 1, key: "CssAlignment.BottomLeft", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 1, key: "CssAlignment.Bottom", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 1, key: "CssAlignment.BottomRight", kind: GrammarKind.Constant }),

    new GrammarType({ dot: 0, key: "VariableSymbol", kind: GrammarKind.Object }),

    new GrammarType({ dot: 0, key: "GCS", kind: GrammarKind.Module }),
    new GrammarType({ dot: 1, key: "GCS.Rx", kind: GrammarKind.Function }),
    new GrammarType({ dot: 1, key: "GCS.Ry", kind: GrammarKind.Function }),
    new GrammarType({ dot: 1, key: "GCS.Rz", kind: GrammarKind.Function }),
    new GrammarType({ dot: 1, key: "GCS.Tx", kind: GrammarKind.Function }),
    new GrammarType({ dot: 1, key: "GCS.Ty", kind: GrammarKind.Function }),
    new GrammarType({ dot: 1, key: "GCS.Tz", kind: GrammarKind.Function }),
    new GrammarType({ dot: 1, key: "GCS.Origin", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 1, key: "GCS.Axes", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 2, key: "GCS.Axes.Rx", kind: GrammarKind.Function }),
    new GrammarType({ dot: 2, key: "GCS.Axes.Ry", kind: GrammarKind.Function }),
    new GrammarType({ dot: 2, key: "GCS.Axes.Rz", kind: GrammarKind.Function }),
    new GrammarType({ dot: 1, key: "GCS.GetLCS", kind: GrammarKind.FunctionEmpty }),
    new GrammarType({ dot: 2, key: "GCS.GetLCS().PointToGcs", kind: GrammarKind.Function }),
    new GrammarType({ dot: 2, key: "GCS.GetLCS().GcsToLcs", kind: GrammarKind.Function }),

    new GrammarType({ dot: 0, key: "Fcm", kind: GrammarKind.Module }),
    new GrammarType({ dot: 1, key: "Fcm.Mesh", kind: GrammarKind.Module }),
    new GrammarType({ dot: 2, key: "Fcm.Mesh.ConnectRules", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 2, key: "Fcm.Mesh.AutoConnect", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 2, key: "Fcm.Mesh.WeldNodes", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 2, key: "Fcm.Mesh.ElementSize", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 2, key: "Fcm.Mesh.DefaultElementType2D", kind: GrammarKind.Constant }),
    new GrammarType({ dot: 1, key: "Fcm.GetAnalysis", kind: GrammarKind.Function }),
    new GrammarType({ dot: 1, key: "Fcm.GetFileNamePath", kind: GrammarKind.Function }),
    new GrammarType({ dot: 1, key: "Fcm.ResourceReader", kind: GrammarKind.Module }),
    new GrammarType({ dot: 2, key: "Fcm.ResourceReader.ReadAsBase64", kind: GrammarKind.Function }),
    new GrammarType({ dot: 2, key: "Fcm.ResourceReader.ReadAsString", kind: GrammarKind.Function }),
    new GrammarType({ dot: 2, key: "Fcm.ResourceReader.ReadJsonAsDynamicObject", kind: GrammarKind.Function }),
    new GrammarType({ dot: 2, key: "Fcm.ResourceReader.ReadJsonAsDynamicObjectArray", kind: GrammarKind.Function }),
    new GrammarType({ dot: 2, key: "Fcm.ResourceReader.ReadGridValues", kind: GrammarKind.Function }),
    new GrammarType({ dot: 2, key: "Fcm.ResourceReader.Path", kind: GrammarKind.Function }),

    new GrammarType({ dot: -1, key: "ToString", kind: GrammarKind.FunctionEmpty }),

    new GrammarType({ dot: -1, key: "Select", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "SelectIterate", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "SelectMany", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "SelectManyFn", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "Aggregate", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "AggregateIterate", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "Max", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "MaxBy", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "IndexOfMax", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "Min", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "MinBy", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "IndexOfMin", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "OrderByAscending", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "OrderByAscendingMore", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "OrderByDescending", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "OrderByDescendingMore", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "Where", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "Find", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "FindOrDefault", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "Take", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "Skip", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "Reverse", kind: GrammarKind.FunctionEmpty, description: "Array function" }),
    new GrammarType({ dot: -1, key: "Zip", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "CollectBy", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "CumulativeSums", kind: GrammarKind.Constant, description: "Array function" }),
    new GrammarType({ dot: -1, key: "Sum", kind: GrammarKind.Constant, description: "Array function" }),
    new GrammarType({ dot: -1, key: "SumItems", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "Buckets", kind: GrammarKind.Constant, description: "Array function" }),
    new GrammarType({ dot: -1, key: "IsEmpty", kind: GrammarKind.Constant, description: "Array function" }),
    new GrammarType({ dot: -1, key: "Count", kind: GrammarKind.Constant, description: "Array function" }),
    new GrammarType({ dot: -1, key: "Empty", kind: GrammarKind.Constant, description: "Array function" }),
    new GrammarType({ dot: -1, key: "GetSpacings", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "GetCumulativeSums", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "Any", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "All", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "Mul", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "MultiplyElements", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "MaskedSpanSums", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "MergeDoubles", kind: GrammarKind.Function, description: "Array function" }),
    new GrammarType({ dot: -1, key: "JoinStrings", kind: GrammarKind.Function, description: "Array string function" }),
    new GrammarType({ dot: -1, key: "JoinStringsWith", kind: GrammarKind.Function, description: "Array string function" }),
    new GrammarType({ dot: -1, key: "JoinStringsFn", kind: GrammarKind.Function, description: "Array string function" }),
    new GrammarType({ dot: -1, key: "JoinStringsWithFn", kind: GrammarKind.Function, description: "Array string function" }),

    new GrammarType({ dot: -1, key: "Substring", kind: GrammarKind.Function, description: "String function" }),
    new GrammarType({ dot: -1, key: "Contains", kind: GrammarKind.Function, description: "String function" }),
    new GrammarType({ dot: -1, key: "EndsWith", kind: GrammarKind.Function, description: "String function" }),
    new GrammarType({ dot: -1, key: "IndexOf", kind: GrammarKind.Function, description: "String function" }),
    new GrammarType({ dot: -1, key: "LastIndexOf", kind: GrammarKind.Function, description: "String function" }),
    new GrammarType({ dot: -1, key: "Trim", kind: GrammarKind.FunctionEmpty, description: "String function" }),
    new GrammarType({ dot: -1, key: "Insert", kind: GrammarKind.Function, description: "String function" }),
    new GrammarType({ dot: -1, key: "Replace", kind: GrammarKind.Function, description: "String function" }),
    new GrammarType({ dot: -1, key: "Remove", kind: GrammarKind.Function, description: "String function" }),
    new GrammarType({ dot: -1, key: "ToLower", kind: GrammarKind.FunctionEmpty, description: "String function" }),
    new GrammarType({ dot: -1, key: "ToUpper", kind: GrammarKind.FunctionEmpty, description: "String function" }),
    new GrammarType({ dot: -1, key: "StartsWith", kind: GrammarKind.Function, description: "String function" }),
    new GrammarType({ dot: -1, key: "PadLeft", kind: GrammarKind.Function, description: "String function" }),
    new GrammarType({ dot: -1, key: "PadRight", kind: GrammarKind.Function, description: "String function" }),
    new GrammarType({ dot: -1, key: "Length", kind: GrammarKind.Constant, description: "String function" }),

]